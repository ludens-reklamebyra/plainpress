version: 2.1
aliases:
  - &fail-payload "\"{
    'attachments':[
    {
    'text':'Failed :unamused: : <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> by $CIRCLE_USERNAME\n
    Repository: <https://circleci.com/gh/ludens-reklamebyra/workflows/$CIRCLE_PROJECT_REPONAME|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n
    Branch: <https://circleci.com/gh/ludens-reklamebyra/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH|$CIRCLE_BRANCH>\n
    Workflow stage: $CIRCLE_STAGE',
    'color':'#D10A20'
    }
    ]
    }\""
  - &fail-cypress-payload "\"{
    'attachments':[
    {
    'text':'Failed :unamused: : <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> by $CIRCLE_USERNAME\n
    Repository: <https://circleci.com/gh/ludens-reklamebyra/workflows/$CIRCLE_PROJECT_REPONAME|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n
    Branch: <https://circleci.com/gh/ludens-reklamebyra/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH|$CIRCLE_BRANCH>\n
    Artifacts: <https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts/0/root/project/commie-theme-g24/cypress/videos/dev/order.spec.tsx.mp4?branch=$CIRCLE_BRANCH&filter=successful | order.spec.tsx.mp4>\n
    Workflow stage: $CIRCLE_STAGE',
    'color':'#D10A20'
    }
    ]
    }\""

  - &success-publish-payload "\"{
    'attachments': [
    {
    'text':'Success: <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> by $CIRCLE_USERNAME\n
    Repository: <https://circleci.com/gh/ludens-reklamebyra/workflows/$CIRCLE_PROJECT_REPONAME|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n
    Branch: <https://circleci.com/gh/ludens-reklamebyra/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH|$CIRCLE_BRANCH>\n
    Workflow stage: $CIRCLE_STAGE\n
    Version: $(grep version package.json | cut -c 15- | rev | cut -c 3- | rev)',
    'color':'#41AA58'
    }
    ]
    }\""

  - &publish-payload "\"{
    'attachments': [
    {
    'text':'Ready to Publish by $CIRCLE_USERNAME\n
    Repository: <https://circleci.com/gh/ludens-reklamebyra/workflows/$CIRCLE_PROJECT_REPONAME|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n
    Branch: <https://circleci.com/gh/ludens-reklamebyra/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH|$CIRCLE_BRANCH>\n
    Artifacts: <https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts/0/home/circleci/project/.out/index.html?branch=$CIRCLE_BRANCH&filter=successful | storybook>\n
    *Publish environment: npm ludens-reklamebyra*',
    'color':'#3AA3E3',
    'actions': [
    {
    'text': 'Publish to npm ludens-reklamebyra!',
    'type': 'button',
    'url':'https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID'
    }
    ]
    }
    ]
    }\""

orbs:
  cypress: cypress-io/cypress@1.9.0

commands:
  create_npm_config:
    description: 'A command to create .npmrc file with auth token pointer to Ludens npm repo'
    steps:
      - run: 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc'
  send_slack_message:
    description: 'Send message to Slack'
    parameters:
      payload:
        type: string
      when:
        type: string
        default: on_success
    steps:
      - run:
          name: 'Sending message to Slack'
          command: |
            curl -X POST -H 'Content-type: application/json' --data << parameters.payload >> $SLACK_COMMIE
          when: << parameters.when >>
  login_to_git:
    description: 'Login to git'
    steps:
      - run:
          command: |
            git config --global user.email "uy@ludensreklame.no"
            git config --global user.name "LudensCircleCi"
  push_to_git:
    description: 'Push changes to git'
    steps:
      - run:
          command: |
            git commit --amend -m "Update version [ci skip]"
            git status
            git push
  clone_service_and_current_repo:
    description: 'Clones both commie-service and current repo'
    steps:
      - run:
          command: |
            mkdir ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            git clone --single-branch --branch $CIRCLE_BRANCH git@github.com:ludens-reklamebyra/$CIRCLE_PROJECT_REPONAME.git
            git clone git@github.com:ludens-reklamebyra/commie-service.git
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
  run_redis:
    description: 'Downloads, compiles, installs and runs redis-server'
    steps:
      - run:
          command: |
            cd commie-service
            mkdir redis-server
            curl -O http://download.redis.io/releases/redis-5.0.5.tar.gz
            tar xvf redis-5.0.5.tar.gz
            cd redis-5.0.5
            make
            make install
            redis-server
          background: true
  run_mongod:
    description: 'Downloads and runs mongod'
    steps:
      - run:
          command: |
            mkdir mongodb
            cd mongodb
            curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.7.tgz
            tar xvf mongodb-linux-x86_64-3.4.7.tgz
            mv mongodb-linux-x86_64-3.4.7 mongodb
            cd mongodb
            mkdir data
            cd bin
            ./mongod --dbpath ~/project/mongodb/mongodb/data
          background: true
  yalc_publish:
    description: 'Publishes current repo with yalc. Kind of like npm link'
    steps:
      - run:
          command: |
            cd $CIRCLE_PROJECT_REPONAME
            yarn install
            yarn build
            yarn global add yalc
            yalc publish
  run_commie_service:
    description: 'Builds and runs commie-service'
    steps:
      - run:
          command: |
            cd commie-service
            yalc add @ludens-reklame/commie-theme-g24
            yarn install
            yarn build
            dockerize -wait tcp://localhost:6379 -timeout 2m
            yarn start
          background: true
  restore_test_db:
    description: 'Downloads and dumps the test db and restores it to the local db'
    steps:
      - run:
          command: |
            dockerize -wait http://localhost:27017 -timeout 1m
            cd ~/project/mongodb/mongodb/bin
            ./mongodump --host $MONGO_URL -d commie-prod-mirror -u $MONGO_USERNAME -p $MONGO_PASSWORD
            ./mongorestore dump/
  run_dev_cypress:
    description: 'Runs the Cypress tests in the current repo in the dev folder'
    steps:
      - run:
          command: |
            cd $CIRCLE_PROJECT_REPONAME
            dockerize -wait tcp://localhost:1337 -timeout 2m
            npx cypress run --spec  "cypress/integration/dev/*spec.tsx"

jobs:
  init:
    docker:
      - image: nodesource/trusty:6.3.1

    steps:
      - checkout
      - create_npm_config

      - run:
          command: |
            'curl -o- -L https://yarnpkg.com/install.sh | bash'
            'export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"'

      - run: yarn install

      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - .npmrc

  build:
    docker:
      - image: circleci/node:6.9.0

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run: yarn build

      - persist_to_workspace:
          root: .
          paths:
            - dist

      - store_artifacts:
          path: dist

      - store_artifacts:
          path: .out

  send-slack-message:
    parameters:
      payload:
        type: string
    docker:
      - image: circleci/node:10.16.0

    steps:
      - send_slack_message:
          payload: << parameters.payload >>

workflows:
  version: 2.1
  master:
    jobs:
      - init:
          name: init-master
          context: PROD
          filters:
            branches:
              only:
                - master

  feature:
    jobs:
      - init:
          name: init-feature
          context: PROD
          filters:
            branches:
              ignore:
                - master


  nightly:
    triggers:
      - schedule:
          cron: '0 8 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - init:
          name: init-nightly
          context: PROD

